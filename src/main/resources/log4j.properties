#config rootLogger
#ALL<DEBUG<INFO<WARN<ERROR<FATAL<OFF
#此句为将等级为INFO的日志信息输出到C和I这两个目的地
log4j.rootLogger=INFO, C, I
#log4j.logger.org.bluesky.tools=INFO, I
#log4j.additivity.org.bluesky.tools=false

#config stdout
log4j.appender.C=org.apache.log4j.ConsoleAppender
log4j.appender.C.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern= [%d]%5p[%t]--[%C{1}.%M]:%m%n
#config Debug logfile
#log4j.appender.D=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.D.File=logs/debug.log
#log4j.appender.D.Threshold=DEBUG
#log4j.appender.D.Append=true
#log4j.appender.D.layout=org.apache.log4j.PatternLayout
#log4j.appender.D.layout.ConversionPattern=[%d{ISO8601}]%5p%6.6r[%t]%x - %C.%M(%F:%L) - %m%n
##config Info logfile
log4j.appender.I=org.apache.log4j.DailyRollingFileAppender
log4j.appender.I.File=logs/info.log
log4j.appender.I.Threshold=INFO
log4j.appender.I.encoding=UTF-8
log4j.appender.I.Append=true
log4j.appender.I.layout=org.apache.log4j.PatternLayout
log4j.appender.I.layout.ConversionPattern=[%d{ISO8601}]%5p%6.6r[%t]%x - C.%M(%F:%L) - %m%n
##config Warn logfile
#log4j.appender.W=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.W.File=logs/warn.log
#log4j.appender.W.Threshold=WARN
#log4j.appender.W.Append=true
#log4j.appender.W.layout=org.apache.log4j.PatternLayout
#log4j.appender.W.layout.ConversionPattern=[%d{ISO8601}]%5p%6.6r[%t]%x - %C.%M(%F:%L) - %m%n
##config Error logfile
#log4j.appender.E=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.E.File=logs/error.log
#log4j.appender.E.Threshold=ERROR
#log4j.appender.E.Append=true
#log4j.appender.E.layout=org.apache.log4j.PatternLayout
#log4j.appender.E.layout.ConversionPattern=[%d{ISO8601}]%5p%6.6r[%t]%x - %C.%M(%F:%L) - %m%n
##config Fatal logfile
#log4j.appender.F=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.F.File=logs/fatal.log
#log4j.appender.F.Threshold=FATAL
#log4j.appender.F.Append=true
#log4j.appender.F.layout=org.apache.log4j.PatternLayout
#log4j.appender.F.layout.ConversionPattern=[%d{ISO8601}]%5p%6.6r[%t]%x - %C.%M(%F:%L) - %m%n


###################################################################################################
#                                             配置说明                                                                                                                                                                    #
###################################################################################################
#配置日志输出级别
##ALL<DEBUG(7)<INFO(6)<WARN(4)<ERROR(3)<FATAL(0)<OFF
#第一种配置方式
#此句为将等级为INFO的日志信息输出到C和I这两个目的地
#log4j.rootLogger=INFO, C, I
#                 WARN, C, W
#第二种配置方式
#rootCategory与rootLogger方式效果相同，推荐使用rootLogger，rootLogger对应Logger类，rootCategory对应原来的Category类
#log4j.rootCategory=INFO, C, I
#                   WARN, C, W
###################################################################################################
#可以为每种级别指定输出目的地
#log4j.logger.debug=DEBUG, D
#log4j.logger.info=INFO, I
#log4j.logger.warn=WARN, W
#log4j.logger.error=ERROR, E
#log4j.logger.fatal=FATAL, F
#为特定包指定日志级别和输出目的地
#第一种配置方式
#log4j.logger.org.bluesky.tools=INFO, C
#log4j.logger.org.apache.commons=ERROR（此句为appche工具类的包）
#log4j.logger.org.apache.struts=WARN（此句为struts的包）
#log4j.logger.org.springframework=DEBUG（此句为Spring的包）
#log4j.logger.org.hibernate.ps.PreparedStatementCache=WARN（此两句是hibernate的包）
#log4j.logger.org.hibernate=DEBUG（此两句是hibernate的包）
#第二种配置方式
#log4j.category.org.bluesky.tools=INFO, C
#为特定包指定日志级别和输出目的地后原有文件中不在输出该目录下日志
#log4j.additivity.org.bluesky.tools=false
#log4j.additivity.org.apache.commons=false（此句为appche工具类的包）
#关闭日志
#log4j.category.org.springframework=OFF（关闭Spring日志）
###################################################################################################
#定义名为stdout的输出端是哪种类型
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender（控制台）
#                      org.apache.log4j.FileAppender（文件）
#                      org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#                      org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#                      org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#                      org.apache.log4j.jdbc.JDBCAppender（将日志信息通过JDBC将日志信息输出到数据库中）
###################################################################################################
#定义名为stdout的输出端的文件名
#log4j.appender.stdout.File=logs/CodeLibrary.log（可以使用相对路径或绝对路径）
###################################################################################################
#定义日志是以追加还是覆盖形式添加到文件中，默认值是true即将消息增加到指定文件中，false指将消息覆盖指定的文件内容
#log4j.appender.stdout.Append=true
#                             false
###################################################################################################
#定义名为stdout的日志级别，类型值与rootLogger相同，如果此次日志级别小于rootLogger，则此处设置不起作用，例如全局为INFO>此处为DEBUG
#log4j.appender.stdout.Threshold=ERROR
#                                DEBUG
###################################################################################################
#定义日志输出编码格式
#log4j.appender.stdout.encoding=UTF-8
#                               GBK
###################################################################################################
#所有的消息都会被立即输出，默认值是true
#log4j.appender.stdout.ImmediateFlush=true
###################################################################################################
#定义产生日志的频率（DailyRollingFileAppender选项属性）
#log4j.appender.stdout.DatePattern='.'yyyy-MM-dd（每天产生一个文件）
#                                  '.'yyyy-MM（每月产生一个文件）
#                                  '.'yyyy-MM-dd-HH（每小时产生一个文件）
###################################################################################################
#定义日志文件大小，当日志文件到达该大小时，将会自动滚动，后缀可以是KB、MB或者是GB（RollingFileAppender选项属性）
#log4j.appender.stdout.MaxFileSize=4096KB
#                                  100M
###################################################################################################
#指定可以产生的滚动文件的最大数（RollingFileAppender选项属性）
#log4j.appender.stdout.MaxBackupIndex=15
###################################################################################################
#定义名为stdout的输出端的layout是哪种类型
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#                             org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#                             org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#                             org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#                             org.apache.log4j.xml.XMLLayout（以XML形式布局）
###################################################################################################
#如果layout使用PatternLayout布局就要指定的打印信息的具体格式ConversionPattern
#-X号: X信息输出时左对齐；
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个"%"字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行
# 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
# 1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
# 2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
# 3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
# 4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。
#log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%t] [%c] [%p] - %m%n
###################################################################################################
###################################################################################################
#SMTP Appender
#######################################################
#log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender 
#log4j.appender.MAIL.Threshold=FATAL
#log4j.appender.MAIL.BufferSize=10
#log4j.appender.MAIL.From=sender@163.com
#log4j.appender.MAIL.SMTPHost=smtp.163.com
#log4j.appender.MAIL.Subject=Log4J Message
#log4j.appender.MAIL.To=addressee@163.com
#log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout
#log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
###################################################################################################
#JDBC Appender
#######################################################
#log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender 
#log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test
#log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver
#log4j.appender.DATABASE.user=root
#log4j.appender.DATABASE.password=
#log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES ('[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n')
#log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout
#log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
###################################################################################################